
# https://github.com/revk/ESP32-Faikin
#
# Available from https://www.amazon.co.uk/dp/B0C2ZYXNYQ
#
# Works with cables like these (make sure to get 5P version):
#   https://www.aliexpress.com/item/1005002904897793.html
#   https://www.aliexpress.com/item/1005005465411765.html
#
# Note that the pinout is different, and you need a 10kΩ pull-up resistor
# between pins 1 and 2 on the Faikin side. (Feature request for that pull-up
# at https://github.com/revk/ESP32-Faikin/issues/418 )
#
#  CN105  1 +12v --------,  .--------------  +5v 1
#                         \/      | 10kΩ
#         2 GND  -------, /\  .------------  RX→ 2
#                        X  \/
#         3 +5v  -------` \ /\ .------------ ←TX 3     Faikin
#                          X  X
#         4 TX→  ---------` \/ `----------- +12v 4
#                           /\
#         5 ←RX  ----------`  `------------  GND 5
#
# The 2024-01-06 board has a WS2812 LED on GPIO47. Older versions
# have three separate GPIOs for red, green and blue.
#
# Programming works via the USB or serial headers on the board.
#
# USB is probably easiest. For serial, the easiest option is probably
# to connect GND and power to the GND and +12v on the *main* connector,
# then just use the TX/RX pins on the debug header. You'll also need
# to short IO0 to ground manually while you apply power.

esphome:
  name: ${name}
  friendly_name: ${friendlyName}
  on_boot:
    priority: 200
    then:
      - delay: 30s
      - switch.turn_off:
          id: ecodan_led_switch

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf
    version: 5.0.2
    platform_version: 6.3.2
    # Custom sdkconfig options
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y

uart:
  id: uart_ecodan
  rx_pin:
    number: GPIO34
    inverted: true
    mode:
      input: true
      pullup: true
  tx_pin:
    number: GPIO48
    inverted: true
    mode:
      output: true
  baud_rate: 2400
  parity: EVEN
  stop_bits: 1
  #debug:
  #  direction: BOTH
  #  dummy_receiver: false
  #  after:
  #    delimiter: "\n"
  #  sequence:
  #    - lambda: UARTDebug::log_hex(direction, bytes, ' ');

light:
#G47=RGB WS2812C-2020
  - platform: esp32_rmt_led_strip
    name: Led
    id: led
    internal: true
    rgb_order: GRB
    pin: GPIO47
    num_leds: 4
    rmt_channel: 0
    chipset: ws2812
    restore_mode: ALWAYS_ON  #OFF?

###  ESP restart button
button:
  - platform: restart
    id: restart_button
    name: ${restart_button}

number:
    ## Set led brightness
  - platform: template
    id: led_brightness
    name: ${led_brightness}
    icon: mdi:toggle-switch-variant
    mode: slider
    entity_category: config
    optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    initial_value: 70
    restore_value: yes
    unit_of_measurement: "%"
    on_value:
      then:
        - if:
            condition:
              - light.is_on: led
            then:
            - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;

switch:
  - platform: template
    id: ecodan_led_switch
    name: ${led_switch}
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON 
    lambda: return id(ecodan_led_switch).state;
    turn_on_action:
      - light.turn_on:
          id: led
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            return id(led_brightness).state / 100.0;
    turn_off_action:
      - light.turn_off:
          id: led

sensor:
  - platform: internal_temperature
    name: ${internal_esp_temperature}
    entity_category: diagnostic